// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrafficControl.Persistence;

#nullable disable

namespace TrafficControl.Persistence.Migrations
{
    [DbContext(typeof(TrafficControlContext))]
    partial class TrafficControlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TrafficControl.Persistence.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("TrafficControl.Persistence.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NetworkFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RouteFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NetworkFileId");

                    b.HasIndex("RouteFileId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("TrafficControl.Persistence.SimulationRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("SimulationRuns");
                });

            modelBuilder.Entity("TrafficControl.Persistence.SimulationRunResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Episode")
                        .HasColumnType("int");

                    b.Property<string>("IntersectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Reward")
                        .HasColumnType("real");

                    b.Property<int>("SimulationRunId")
                        .HasColumnType("int");

                    b.Property<float>("StoppedVehiclesAverage")
                        .HasColumnType("real");

                    b.Property<float>("WaitingTimeAverage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SimulationRunId");

                    b.ToTable("SimulationRunResults");
                });

            modelBuilder.Entity("TrafficControl.Persistence.Scenario", b =>
                {
                    b.HasOne("TrafficControl.Persistence.File", "NetworkFile")
                        .WithMany("NetworkScenarios")
                        .HasForeignKey("NetworkFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TrafficControl.Persistence.File", "RouteFile")
                        .WithMany("RouteScenarios")
                        .HasForeignKey("RouteFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("NetworkFile");

                    b.Navigation("RouteFile");
                });

            modelBuilder.Entity("TrafficControl.Persistence.SimulationRun", b =>
                {
                    b.HasOne("TrafficControl.Persistence.Scenario", "Scenario")
                        .WithMany("SimulationRuns")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("TrafficControl.Persistence.SimulationRunResult", b =>
                {
                    b.HasOne("TrafficControl.Persistence.SimulationRun", "SimulationRun")
                        .WithMany("Results")
                        .HasForeignKey("SimulationRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SimulationRun");
                });

            modelBuilder.Entity("TrafficControl.Persistence.File", b =>
                {
                    b.Navigation("NetworkScenarios");

                    b.Navigation("RouteScenarios");
                });

            modelBuilder.Entity("TrafficControl.Persistence.Scenario", b =>
                {
                    b.Navigation("SimulationRuns");
                });

            modelBuilder.Entity("TrafficControl.Persistence.SimulationRun", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
